{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/utils/db.ts"],"sourcesContent":["interface User {\r\n  id: string\r\n  email: string\r\n  name: string\r\n  password: string\r\n}\r\n\r\n\r\nconst users: User[] = [\r\n  {\r\n    id: \"1\",\r\n    email: \"wowdash@gmail.com\",\r\n    name: \"Wowdash\",\r\n    password: \"Pa$$w0rd!\"\r\n  }\r\n]\r\n\r\nexport async function getUserFromDb(email: string, hashedPassword: string): Promise<User | null> {\r\n  const find = users.find(user => user.email === email && user.password === hashedPassword)\r\n  return find || null\r\n}\r\n"],"names":[],"mappings":";;;AAQA,MAAM,QAAgB;IACpB;QACE,IAAI;QACJ,OAAO;QACP,MAAM;QACN,UAAU;IACZ;CACD;AAEM,eAAe,cAAc,KAAa,EAAE,cAAsB;IACvE,MAAM,OAAO,MAAM,IAAI,CAAC,CAAA,OAAQ,KAAK,KAAK,KAAK,SAAS,KAAK,QAAQ,KAAK;IAC1E,OAAO,QAAQ;AACjB"}},
    {"offset": {"line": 44, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/lib/zod.ts"],"sourcesContent":["import { z } from \"zod\";\r\n\r\n// Password Schema Base\r\nconst passwordField = z\r\n  .string({ required_error: \"Password is required\" })\r\n  .min(8, { message: \"Password must be more than 8 characters\" })\r\n  .max(15, { message: \"Password must be less than 15 characters\" })\r\n  .regex(/[a-zA-Z]/, { message: \"Contain at least one letter.\" })\r\n  .regex(/[0-9]/, { message: \"Contain at least one number.\" })\r\n  .regex(/[^a-zA-Z0-9]/, { message: \"Contain at least one special character.\" })\r\n  .trim();\r\n\r\n// Email schema base\r\nconst emailField = z\r\n  .string()\r\n  .min(1, \"Email is required\")\r\n  .email(\"Invalid email!\");\r\n\r\n// Login Schema\r\nexport const loginSchema = z.object({\r\n  email: emailField,\r\n  password: passwordField,\r\n});\r\n\r\n// Register Schema\r\nexport const registerSchema = loginSchema.extend({\r\n  username: z.string().min(2, {\r\n    message: \"Username must be at least 2 characters.\",\r\n  }),\r\n  acceptTerms: z.literal(true, {\r\n    errorMap: () => ({ message: \"You must accept the terms and conditions\" }),\r\n  }),\r\n});\r\n\r\n// Forgot Password Schema\r\nexport const forgotPasswordSchema = z.object({\r\n  email: emailField,\r\n});\r\n\r\n// Create Password Schema\r\nexport const createPasswordSchema = z\r\n  .object({\r\n    password: passwordField,\r\n    confirmPassword: z.string({\r\n      required_error: \"Confirm Password is required\",\r\n    }),\r\n    acceptTerms: z.literal(true, {\r\n      errorMap: () => ({ message: \"You must accept the terms and conditions\" }),\r\n    }),\r\n  })\r\n  .refine((data) => data.password === data.confirmPassword, {\r\n    message: \"Password does not match\",\r\n    path: [\"confirmPassword\"],\r\n  });\r\n\r\nexport const formSchema = z.object({\r\n  firstName: z.string().min(1, \"First name is required\"),\r\n  lastName: z.string().min(1, \"Last name is required\"),\r\n  email: z.string().email(\"Invalid email\"),\r\n  phone: z.string().min(10, \"Phone number is required\"),\r\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\r\n});\r\n\r\nexport type FormSchemaType = z.infer<typeof formSchema>;\r\n"],"names":[],"mappings":";;;;;;;AAAA;;AAEA,uBAAuB;AACvB,MAAM,gBAAgB,0KAAA,CAAA,IAAC,CACpB,MAAM,CAAC;IAAE,gBAAgB;AAAuB,GAChD,GAAG,CAAC,GAAG;IAAE,SAAS;AAA0C,GAC5D,GAAG,CAAC,IAAI;IAAE,SAAS;AAA2C,GAC9D,KAAK,CAAC,YAAY;IAAE,SAAS;AAA+B,GAC5D,KAAK,CAAC,SAAS;IAAE,SAAS;AAA+B,GACzD,KAAK,CAAC,gBAAgB;IAAE,SAAS;AAA0C,GAC3E,IAAI;AAEP,oBAAoB;AACpB,MAAM,aAAa,0KAAA,CAAA,IAAC,CACjB,MAAM,GACN,GAAG,CAAC,GAAG,qBACP,KAAK,CAAC;AAGF,MAAM,cAAc,0KAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAClC,OAAO;IACP,UAAU;AACZ;AAGO,MAAM,iBAAiB,YAAY,MAAM,CAAC;IAC/C,UAAU,0KAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;QAC1B,SAAS;IACX;IACA,aAAa,0KAAA,CAAA,IAAC,CAAC,OAAO,CAAC,MAAM;QAC3B,UAAU,IAAM,CAAC;gBAAE,SAAS;YAA2C,CAAC;IAC1E;AACF;AAGO,MAAM,uBAAuB,0KAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC3C,OAAO;AACT;AAGO,MAAM,uBAAuB,0KAAA,CAAA,IAAC,CAClC,MAAM,CAAC;IACN,UAAU;IACV,iBAAiB,0KAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACxB,gBAAgB;IAClB;IACA,aAAa,0KAAA,CAAA,IAAC,CAAC,OAAO,CAAC,MAAM;QAC3B,UAAU,IAAM,CAAC;gBAAE,SAAS;YAA2C,CAAC;IAC1E;AACF,GACC,MAAM,CAAC,CAAC,OAAS,KAAK,QAAQ,KAAK,KAAK,eAAe,EAAE;IACxD,SAAS;IACT,MAAM;QAAC;KAAkB;AAC3B;AAEK,MAAM,aAAa,0KAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACjC,WAAW,0KAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC7B,UAAU,0KAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC5B,OAAO,0KAAA,CAAA,IAAC,CAAC,MAAM,GAAG,KAAK,CAAC;IACxB,OAAO,0KAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,IAAI;IAC1B,UAAU,0KAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;AAC9B"}},
    {"offset": {"line": 115, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/auth.ts"],"sourcesContent":["import NextAuth from \"next-auth\"\r\nimport Credentials from \"next-auth/providers/credentials\"\r\nimport Google from \"next-auth/providers/google\"\r\nimport GitHub from \"next-auth/providers/github\"\r\nimport { getUserFromDb } from \"./utils/db\"\r\nimport { loginSchema } from \"./lib/zod\"\r\nimport { ZodError } from \"zod\"\r\n\r\nexport const { handlers, signIn, signOut, auth } = NextAuth({\r\n  providers: [\r\n    Credentials({\r\n      credentials: {\r\n        email: {},\r\n        password: {},\r\n      },\r\n      authorize: async (credentials) => {\r\n        try {\r\n          const { email, password } = await loginSchema.parseAsync(credentials)\r\n\r\n          const user = await getUserFromDb(email, password)\r\n\r\n          if (!user) {\r\n            return null\r\n          }\r\n          return user\r\n        } \r\n        catch (error) {\r\n          if (error instanceof ZodError) {\r\n            return null\r\n          }\r\n          return null\r\n        }\r\n      }\r\n    }),\r\n    \r\n    Google({\r\n      clientId: process.env.GOOGLE_CLIENT_ID,\r\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET,\r\n      authorization: {\r\n        params: {\r\n          prompt: \"consent\",\r\n          access_type: \"offline\",\r\n          response_type: \"code\",\r\n        },\r\n      },\r\n    }),\r\n    GitHub({\r\n      clientId: process.env.GITHUB_CLIENT_ID,\r\n      clientSecret: process.env.GITHUB_CLIENT_SECRET,\r\n      authorization: {\r\n        params: {\r\n          prompt: \"consent\",\r\n          access_type: \"offline\",\r\n          response_type: \"code\",\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n})"],"names":[],"mappings":";;;;;;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;;;;;;;;AAEO,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,CAAA,GAAA,6JAAA,CAAA,UAAQ,AAAD,EAAE;IAC1D,WAAW;QACT,CAAA,GAAA,kKAAA,CAAA,UAAW,AAAD,EAAE;YACV,aAAa;gBACX,OAAO,CAAC;gBACR,UAAU,CAAC;YACb;YACA,WAAW,OAAO;gBAChB,IAAI;oBACF,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,MAAM,kHAAA,CAAA,cAAW,CAAC,UAAU,CAAC;oBAEzD,MAAM,OAAO,MAAM,CAAA,GAAA,mHAAA,CAAA,gBAAa,AAAD,EAAE,OAAO;oBAExC,IAAI,CAAC,MAAM;wBACT,OAAO;oBACT;oBACA,OAAO;gBACT,EACA,OAAO,OAAO;oBACZ,IAAI,iBAAiB,6IAAA,CAAA,WAAQ,EAAE;wBAC7B,OAAO;oBACT;oBACA,OAAO;gBACT;YACF;QACF;QAEA,CAAA,GAAA,6JAAA,CAAA,UAAM,AAAD,EAAE;YACL,UAAU,QAAQ,GAAG,CAAC,gBAAgB;YACtC,cAAc,QAAQ,GAAG,CAAC,oBAAoB;YAC9C,eAAe;gBACb,QAAQ;oBACN,QAAQ;oBACR,aAAa;oBACb,eAAe;gBACjB;YACF;QACF;QACA,CAAA,GAAA,6JAAA,CAAA,UAAM,AAAD,EAAE;YACL,UAAU,QAAQ,GAAG,CAAC,gBAAgB;YACtC,cAAc,QAAQ,GAAG,CAAC,oBAAoB;YAC9C,eAAe;gBACb,QAAQ;oBACN,QAAQ;oBACR,aAAa;oBACb,eAAe;gBACjB;YACF;QACF;KACD;AACH"}},
    {"offset": {"line": 192, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/middleware.ts"],"sourcesContent":["import { auth } from \"./auth\";\r\nimport { NextResponse } from \"next/server\";\r\nimport type { NextRequest } from \"next/server\";\r\n\r\nconst publicRoutes = [\r\n  \"/auth/login\",\r\n  \"/auth/register\",\r\n  \"/auth/forgot-password\",\r\n  \"/auth/create-password\",\r\n];\r\n\r\nexport async function middleware(req: NextRequest) {\r\n  const { pathname } = req.nextUrl;\r\n\r\n  if (\r\n    pathname.startsWith(\"/_next\") ||\r\n    pathname.startsWith(\"/favicon.ico\") ||\r\n    pathname.startsWith(\"/api\") ||\r\n    pathname.startsWith(\"/images\") ||\r\n    pathname.startsWith(\"/manifest.json\")\r\n  ) {\r\n    return NextResponse.next();\r\n  }\r\n\r\n  let session = null;\r\n\r\n  try {\r\n    session = await auth();\r\n  } catch (error) {\r\n    return NextResponse.redirect(new URL(\"/auth/login\", req.url));\r\n  }\r\n\r\n  const isPublic = publicRoutes.some((route) => pathname.startsWith(route));\r\n\r\n  if (!session?.user && !isPublic) {\r\n    return NextResponse.redirect(new URL(\"/auth/login\", req.url));\r\n  }\r\n\r\n  return NextResponse.next();\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;AAAA;;;AAGA,MAAM,eAAe;IACnB;IACA;IACA;IACA;CACD;AAEM,eAAe,WAAW,GAAgB;IAC/C,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,OAAO;IAEhC,IACE,SAAS,UAAU,CAAC,aACpB,SAAS,UAAU,CAAC,mBACpB,SAAS,UAAU,CAAC,WACpB,SAAS,UAAU,CAAC,cACpB,SAAS,UAAU,CAAC,mBACpB;QACA,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI;IAC1B;IAEA,IAAI,UAAU;IAEd,IAAI;QACF,UAAU,MAAM,CAAA,GAAA,4GAAA,CAAA,OAAI,AAAD;IACrB,EAAE,OAAO,OAAO;QACd,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,eAAe,IAAI,GAAG;IAC7D;IAEA,MAAM,WAAW,aAAa,IAAI,CAAC,CAAC,QAAU,SAAS,UAAU,CAAC;IAElE,IAAI,CAAC,SAAS,QAAQ,CAAC,UAAU;QAC/B,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,eAAe,IAAI,GAAG;IAC7D;IAEA,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI;AAC1B"}}]
}